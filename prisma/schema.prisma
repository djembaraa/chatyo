// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
  MEMBER
  OWNER
}

model Role {
  id String @id @default(uuid()) @db.Char(36)

  role RoleType @unique

  users User[]
  room_members RoomMember[]

  @@map("roles")
}

model User {
  id String @id @default(uuid()) @db.Char(36)

  name String
  email String
  password String
  photo String

  role_id String 
  role Role @relation(fields: [role_id], references: [id])

  rooms Room[] @relation("UserCreatedRelations")
  room_members RoomMember[]
  messages RoomMessage[]

  password_resets PasswordReset[]

  owned_transactions Transaction[] @relation("TransactionOwnerRelations")
  member_transactions Transaction[] @relation("TransactionMemberRelations")

  payouts Payouts[]

  @@map("users")
}

enum GroupType {
  FREE
  PAID
}

model Group {
  id String @id @default(uuid()) @db.Char(36)

  name String
  photo String
  type GroupType
  about String @db.Text
  benefit String[]

  price Int

  created_at DateTime @default(now())

  assets GroupAssets[]

  transactions Transaction[]

  @@map("groups")
}

model GroupAssets {
  id String @id @default(uuid()) @db.Char(36)

  group_id String
  group Group @relation(fields: [group_id], references: [id])

 filename String

 @@map("group_assets")
}

model Room {
  id String @id @default(uuid()) @db.Char(36)

  name String?
  is_group Boolean @default(false)

  created_by String
  created_by_user User @relation("UserCreatedRelations",fields: [created_by], references: [id])

  created_at DateTime @default(now())

  member RoomMember[]
  messages RoomMessage[]

  @@map("rooms")
}

model RoomMember {
  id String @id @default(uuid()) @db.Char(36)

  room_id String
  room Room @relation(fields: [room_id], references: [id])

  user_id String
  user User @relation(fields: [user_id], references: [id])

  role_id String
  role Role @relation(fields: [role_id], references: [id])
  
  joined_at DateTime @default(now())

  @@map("room_members")
}

enum MessageType {
  TEXT 
  IMAGE
}

model RoomMessage {
  id String @id @default(uuid()) @db.Char(36)

  room_id String
  room Room @relation(fields: [room_id], references: [id])

  user_id String
  user User @relation(fields: [user_id], references: [id])

  content String 

  type MessageType? @default(TEXT)

  created_at DateTime @default(now())

  @@map("room_messages")
}

model PasswordReset {
  id String @id @default(uuid()) @db.Char(36)

  user_id String
  user User @relation(fields: [user_id], references: [id])

  token String 
  @@map("password_resets")
}

enum TransactionType {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id String @id @default(uuid()) @db.Char(36)

  owner_id String
  owner User @relation("TransactionOwnerRelations",fields: [owner_id], references: [id])

  user_id String
  user User @relation("TransactionMemberRelations",fields: [user_id], references: [id])

  group_id String
  group Group @relation(fields: [group_id], references: [id])

  price Int

  type TransactionType @default(PENDING)

  created_at DateTime @default(now())

  @@map("transactions")
}

model Payouts {
  id String @id @default(uuid()) @db.Char(36)

  user_id String
  user User @relation(fields: [user_id], references: [id])

  amount Int

  bank_name String
  bank_account_number String
  bank_account_name String

  status TransactionType @default(PENDING)

  proof String? @db.Text

  created_at DateTime @default(now())

  @@map("payouts")
}